#include <ESP8266WiFi.h> 
#include <ESP8266WebServer.h> 
 
IPAddress    apIP(42, 42, 42, 42);  // Defining a static IP address: local & gateway 

const char *ssid = "KS_Carr"; 

ESP8266WebServer server(80); 
 
const int ledPin1 = 5; // an LED is connected to NodeMCU pin D1 (ESP8266 GPIO5) via a 1K Ohm resistor 
const int ledPin2 = 4;
const int ledPin3 = 0;
const int ledPin4 = 2; 

int state = 5; 

void setup() { 
    pinMode ( ledPin1, OUTPUT ); 
    pinMode ( ledPin2, OUTPUT ); 
    pinMode ( ledPin3, OUTPUT ); 
    pinMode ( ledPin4, OUTPUT ); 
    digitalWrite ( ledPin1, 0 );     digitalWrite ( ledPin1, 0 ); 
    digitalWrite ( ledPin2, 0 ); 
    digitalWrite ( ledPin3, 0 ); 
    digitalWrite ( ledPin4, 0 ); 
    digitalWrite ( ledPin2, 0 ); 
    digitalWrite ( ledPin3, 0 ); 
    digitalWrite ( ledPin4, 0 ); 
   
    delay(1000); 
    Serial.begin(115200); 
    Serial.println(); 
    Serial.println("Configuring access point..."); 
 
    //set-up the custom IP address 
    WiFi.mode(WIFI_AP_STA); 
    WiFi.softAPConfig(apIP, apIP, IPAddress(255, 255, 255, 0));   // subnet FF FF FF 00   
   
    /* You can remove the password parameter if you want the AP to be open. */ 
    WiFi.softAP(ssid); 
 
    IPAddress myIP = WiFi.softAPIP(); 
    Serial.print("AP IP address: "); 
    Serial.println(myIP); 
  
    server.on ( "/", handleRoot ); 
    server.on ( "/led=1", handleRoot); 
    server.on ( "/led=2", handleRoot); 
    server.on ( "/led=3", handleRoot);
    server.on ( "/led=4", handleRoot);
    server.on ( "/led=5", handleRoot);
    server.on ( "/inline", []() { 
        server.send ( 200, "text/plain", "this works as well" ); 
    } ); 
    server.onNotFound ( handleNotFound ); 
   
    server.begin(); 
    Serial.println("HTTP server started"); 
} 
 
void loop() { 
    server.handleClient(); 
} 
 
void handleRoot() {  
    state = server.arg("led").toInt(); 
    if (state == 1) {
      forward();
    } else if (state == 2) {
      back();
    } else if (state == 3) {
      right();
    } else if (state == 4) {
      left();
    } else {
      stop();
    }
 
 
    char html[1000]; 
    // Build an HTML page to display on the web-server root address 
    snprintf ( html, 1000, 
    "<html>\ 
        <head>\ 
            <title>ESP8266 WiFi Network</title>\ 
            <style>\ 
                body { background-color: #cccccc; font-family: Arial, Helvetica, Sans-Serif; font-size: 1.5em; Color: #000000; }\ 
                h1 { Color: #AA0000; }\ 
                button {width: 200px; height: 200px; font-size: 2em;}\ 
            </style>\ 
        </head>\ 
        <body>\ 
            <h1>KS Car</h1>\ 
            <table>\ 
                <tr>\ 
                    <td></td>\ 
                    <td><a href=\"/?led=1\">\ 
                        <button>Forward</button>\ 
                    </a></td>\ 
                    <td></td>\ 
                </tr>\ 
                <tr>\ 
                    <td><a href=\"/?led=4\">\ 
                        <button>Left</button>\ 
                    </a></td>\ 
                    <td><a href=\"/?led=5\">\ 
                        <button>Stop</button>\ 
                    </a></td>\ 
                    <td><a href=\"/?led=3\">\ 
                        <button>Right</button>\ 
                    </a></td>\ 
                </tr>\ 
                <tr>\ 
                    <td></td>\ 
                    <td><a href=\"/?led=2\">\ 
                        <button>Back</button>\ 
                    </a></td>\ 
                    <td></td>\ 
                </tr>\ 
            </table>\ 
        </body>\ 
    </html>"); 
   server.send ( 200, "text/html", html ); 
 } 
 
 
void handleNotFound() { 
    String message = "File Not Found\n\n"; 
    message += "URI: "; 
    message += server.uri(); 
    message += "\nMethod: "; 
    message += ( server.method() == HTTP_GET ) ? "GET" : "POST"; 
    message += "\nArguments: "; 
    message += server.args(); 
    message += "\n"; 
 
    for ( uint8_t i = 0; i < server.args(); i++ ) { 
        message += " " + server.argName ( i ) + ": " + server.arg ( i ) + "\n"; 
    } 

    server.send ( 404, "text/plain", message );
} 

void stop() {
    digitalWrite ( ledPin1, 0 ); 
    digitalWrite ( ledPin2, 0 ); 
    digitalWrite ( ledPin3, 0 ); 
    digitalWrite ( ledPin4, 0 ); 
} 

void forward() {
    digitalWrite ( ledPin1, 1 ); 
    digitalWrite ( ledPin2, 0 ); 
    digitalWrite ( ledPin3, 1 ); 
    digitalWrite ( ledPin4, 0 ); 
} 

void back() {
    digitalWrite ( ledPin1, 0 ); 
    digitalWrite ( ledPin2, 1 ); 
    digitalWrite ( ledPin3, 0 ); 
    digitalWrite ( ledPin4, 1 ); 
} 

void left() {
    digitalWrite ( ledPin1, 0 ); 
    digitalWrite ( ledPin2, 1 ); 
    digitalWrite ( ledPin3, 1 ); 
    digitalWrite ( ledPin4, 0 ); 
} 

void right() {
    digitalWrite ( ledPin1, 1 ); 
    digitalWrite ( ledPin2, 0 ); 
    digitalWrite ( ledPin3, 0 ); 
    digitalWrite ( ledPin4, 1 ); 
} 
